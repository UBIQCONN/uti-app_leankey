apply plugin: 'com.android.application'

def getVersionTag = { variant ->
    def stdout
    try {
        stdout = new ByteArrayOutputStream()
        exec {
            commandLine "git", "describe", "--match", "${variant}/*", "--tags"
            standardOutput = stdout
        }
        def longTag = stdout.toString().trim()
        println longTag

        if (longTag.indexOf('-') > 0)
            return longTag.substring(longTag.indexOf('/') + 1, longTag.indexOf('-'))
        else
            return longTag.substring(longTag.indexOf('/') + 1)

    } catch (exception) {
        return "0.0.0";
    }
}

def getVersionCode = { tag ->
    def parts = tag.tokenize('.')
    if(parts.size() != 3 || parts[1].length() > 2 || parts[2].length() > 2) {
        throw new RuntimeException("Invalid version tag \"${tag}\", format \"x.y.z\" expected.")
    }
    if(parts[1].length() == 1) {
        parts[1] = "0" + parts[1]
    }
    if(parts[2].length() == 1) {
        parts[2] = "0" + parts[2]
    }
    return Integer.parseInt(parts[0] + parts[1] + parts[2])
}

def getVersionName = { tag ->
    return tag
}

android {
    // FIX: Default interface methods are only supported starting with Android N (--min-api 24)
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    
    compileSdkVersion project.properties.compileSdkVersion
    buildToolsVersion project.properties.buildToolsVersion

    defaultConfig {
        applicationId "org.liskovsoft.leankeykeyboard.pro"
        minSdkVersion project.properties.minSdkVersion
        targetSdkVersion project.properties.targetSdkVersion
        versionCode 10003
        versionName "1.0.3"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    signingConfigs {
        sign_aosp {
            keyAlias 'aosp'
            keyPassword 'ubiqconn'
            storeFile file('../signkey/aosp_platform.jks')
            storePassword 'ubiqconn'
        }
        sign_nxp_evk {
            keyAlias 'nxp_evk'
            keyPassword 'ubiqconn'
            storeFile file('../signkey/nxp_evk.jks')
            storePassword 'ubiqconn'
        }
        sign_ubiqconn {
            keyAlias 'ubiqconn'
            keyPassword 'ubiqconn'
            storeFile file('../signkey/ubiqconn_platform.jks')
            storePassword 'ubiqconn'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.sign_ubiqconn
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            // https://medium.com/@angelhiadefiesta/how-to-obfuscate-in-android-with-proguard-acab47701577
            signingConfig signingConfigs.sign_ubiqconn
            minifyEnabled true // enable obfuscation
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    // naming example: SmartYouTubeTV_Xwalk_v6.8.12_r.apk
    // https://stackoverflow.com/questions/18332474/how-to-set-versionname-in-apk-filename-using-gradle
    applicationVariants.all { variant ->
        variant.outputs.each { output ->

            def versionTag = getVersionTag('release')
            def myVersionCode = getVersionCode(versionTag)
            def myVersionName = getVersionName(versionTag)

            println variant.name + "[" + myVersionCode + ", " + myVersionName + "]"

            if (versionTag.equalsIgnoreCase("0.0.0")) {
                output.versionNameOverride = defaultConfig.versionName
                output.versionCodeOverride = defaultConfig.versionCode
            } else {
                output.versionNameOverride = myVersionName
                output.versionCodeOverride = myVersionCode
            }

            def project = "LeanKeyKeyboardPro"
            def buildType = variant.buildType.name
            def version = variant.versionName
            def flavor = variant.productFlavors[-1].name

            def newApkName = sprintf("%s_v%s_%s_%s.apk", [project, version, flavor, buildType])

            output.outputFileName = new File(newApkName)
        }
    }

    lintOptions {
        abortOnError true
        disable 'MissingTranslation'
        disable 'NewApi'
    }

    // gradle 4.6 migration: disable dimensions mechanism
    // more: https://proandroiddev.com/advanced-android-flavors-part-4-a-new-version-fc2ad80c01bb
    flavorDimensions "default"

    productFlavors {
        playstore {
            applicationId "org.liskovsoft.androidtv.rukeyboard"
        }
        origin {
            applicationId "com.liskovsoft.leankeyboard"
        }
    }
    namespace "com.liskovsoft.leankeykeyboard"
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    androidTestImplementation(project.properties.espressoCoreVersion, {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation project.properties.junitVersion
    implementation project.properties.appCompatXVersion
    implementation project.properties.leanbackCompatXVersion
    implementation project.properties.constraintXVersion
    implementation project.properties.designXVersion
    implementation project.properties.voiceOverlayVersion
}

// Define a custom task to copy the APK
task copyApk(type: Copy) {
    // Iterate over application variants
    android.applicationVariants.all { variant ->
        // Get the output file for the variant
        def outputFileName = variant.outputs.first().outputFileName

        // Construct the source file path
        def sourceFile = "${project.buildDir}/outputs/apk/${variant.productFlavors[-1].name}/${variant.buildType.name}/${outputFileName}"

        // Set the destination directory
        def destinationDirectory = "${project.rootDir}/"

        //println "source file " + sourceFile
        // Copy the APK file
        from sourceFile
        into destinationDirectory
        rename { fileName ->
            // Rename the file if needed
            fileName
        }

        // Print a debug message
        println "Copying $sourceFile to $destinationDirectory"
    }
}
task delApk(type: Delete) {
    // Iterate over application variants
    android.applicationVariants.all { variant ->
        // Get the output file for the variant
        def outputFileName = variant.outputs.first().outputFileName

        // Construct the file path to be deleted
        def filePathToDelete = "${project.rootDir}/${outputFileName}"

        // Delete the APK file
        delete filePathToDelete

        // Print a debug message
        println "Deleting $filePathToDelete"
    }
}
// Make the copyApk task depend on the assembleRelease task
tasks.getByName("assemble").dependsOn(copyApk)
tasks.getByName("clean").dependsOn(delApk)